1. Namespaces;

a. No "using" declarations in header files.
b. All symbols should declared in a namespace except for final applications.
c. Preprocessor symbols should be prefixed with the namespace in all-caps and an underscore.

(WRONG)
#include <cassert>
using namespace std;
tuple<float, float> meanAndSigma(vector<float> const& _v);

(CORRECT)
#include <cassert>
std::tuple<float, float> meanAndSigma(std::vector<float> const& _v);


3. Capitalization;

a. Use camelCase for splitting words in names, except where obviously extending STL/boost functionality in which case follow those naming conventions.
b. The following entities' first alpha is upper case:
- Type names.
- Template parameters.
- Enum members.
- static const variables that form an external API.
c. All preprocessor symbols (macros, macro argments) in full uppercase with underscore word separation.

All other entities' first alpha is lower case.


4. Variable prefixes:

- Leading underscore "_" to parameter names (both normal and template).
- Leading "c_" to const variables (unless part of an external API).
- Leading "g_" to global (non-const) variables.
- Leading "s_" to static (non-const, non-global) variables.


7. Declarations;

a. {Typename} + {qualifiers} + {name}.
b. Only one per line.
c. Associate */& with type, not variable (at ends with parser, but more readable, and safe if in conjunction with (b)).
d. Favour declarations close to use; don't habitually declare them at top of scope.
e. Always pass non-trivial parameters with a const& suffix.
f. If a function returns multiple values, use std::tuple (std::pair acceptable). Do not use */& arguments.
g. Never use a macro where adequate non-preprocessor C++ can be written.

(WRONG)
const double d = 0;
int i, j;
char *s;
float meanAndSigma(std::vector<float> _v, float* _sigma);

(CORRECT)
double const d = 0;
int i;
int j;
char* s;
std::tuple<float, float> meanAndSigma(std::vector<float> const& _v);


8. Formatting

a. Use tabs for indentation; 4 spaces wide. One indentation level -> exactly one byte (i.e. a tab character) in the source file.
b. Don't worry about having lines > 80-char wide. We're not editing on terminals anymore.
c. Don't use braces for condition-body one-liners.
d. Never place condition bodies on same line as condition.
e. Space between first paren and keyword, but *not* following first paren or preceeding final paren.
f. Space intra-expression parens according to clarity.
g. No spaces for subscripting.
h. Space all other operators.
i. Braces, when used, always have their own lines and are at same indentation level as "parent" scope.

(WRONG)
if( a==b[ i ] ) { printf ("Hello\n"); }

(RIGHT)
if (a == b[i])
    printf("Hello\n");	// NOTE spaces used instead of tab here for clarify - first byte should be '\t'.

